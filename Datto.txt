$ErrorActionPreference = "Stop"
try {
    # Define the temp path and create if it doesn't exist
    $tempPath = "C:\Temp\scripts"
    $logPath = Join-Path $tempPath "WinStoreUpdate.log"
    
    if (-not (Test-Path $tempPath)) {
        Write-Output "Creating directory: $tempPath"
        New-Item -ItemType Directory -Path $tempPath -Force | Out-Null
    }
    
    # Define the source and destination paths
    $scriptSourcePath = "./appstoreupdaternew.ps1"  # Source file path (local)
    $scriptPath = Join-Path $tempPath "appstoreupdaternew.ps1"  # Destination path
    
    # Check if the script file already exists in the destination, and if so, delete it
    if (Test-Path $scriptPath) {
        Write-Output "Script file already exists, deleting: $scriptPath"
        Remove-Item $scriptPath -Force
    }
    
    # Copy the script from the local directory to the temp directory
    Write-Output "Copying script from $scriptSourcePath to $scriptPath"
    Copy-Item $scriptSourcePath -Destination $scriptPath -Force
    Write-Output "Script copied successfully to $scriptPath"
    
    # Use SYSTEM account instead of current user
    $UserContext = "SYSTEM"
    
    # Create the argument list with output redirection
    $argumentList = "-NoProfile -ExecutionPolicy Bypass -WindowStyle Hidden -File `"$scriptPath`" *> `"$logPath`" "
    
    # Create task action with output logging
    $action = New-ScheduledTaskAction -Execute "powershell.exe" `
        -Argument $argumentList
    
    # Create monthly trigger for last Friday at 7:00 PM
    $trigger = New-ScheduledTaskTrigger -Weekly -WeeksInterval 4 -DaysOfWeek Friday -At "19:00"
    
    # Create principal (run with SYSTEM account)
    $principal = New-ScheduledTaskPrincipal -UserId $UserContext `
        -LogonType ServiceAccount `
        -RunLevel Highest
    
    # Create the task settings with basic options
    $settings = New-ScheduledTaskSettingsSet `
        -DontStopIfGoingOnBatteries `
        -AllowStartIfOnBatteries `
        -ExecutionTimeLimit (New-TimeSpan -Hours 2) `
        -Hidden
    
    # Register the scheduled task
    Register-ScheduledTask -TaskName "WinStore Update" `
        -Action $action `
        -Trigger $trigger `
        -Principal $principal `
        -Settings $settings `
        -Force
    
    Write-Output "Scheduled task created successfully"
    Write-Output "Task will run as: $UserContext"
    Write-Output "Output will be logged to: $logPath"
    Write-Output "Task will run whether user is logged in or not"
    
    # Add a function to test the task and get output
    function Test-ScheduledTask {
        Write-Output "Testing scheduled task..."
        Start-ScheduledTask -TaskName "WinStore Update"
        
        # Wait for log file to be created and contain content
        $waitTime = 0
        $maxWait = 30 # Maximum seconds to wait
        
        while ((-not (Test-Path $logPath) -or (Get-Content $logPath).Length -eq 0) -and $waitTime -lt $maxWait) {
            Start-Sleep -Seconds 1
            $waitTime++
        }
        
        if (Test-Path $logPath) {
            Write-Output "Task output:"
            Get-Content $logPath
        } else {
            Write-Output "No output file created within timeout period"
        }
    }
    
    # Uncomment the following line to test the task immediately
    # Test-ScheduledTask
}
catch {
    Write-Error "Failed to execute script: $_"
    exit 1
}
